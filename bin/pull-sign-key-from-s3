#!/bin/sh
#
# Pull GPG sign key from S3 bucket
#
# Usage: bin/pull-sign-key-from-s3
#
# This will pull the private signing key from S3 and import it onto the local
# GPG keyring.
#
# Environment:
#   (Optional) AWS_PROFILE => Set which AWS profile is going to be used to
#     perform the S3 operations. This is recommended over using the access keys
#     directly.
#   (Optional) AWS_ACCESS_KEY_ID => If not using AWS profiles, this should
#     point to the key created by IAM.
#   (Optional) AWS_SECRET_ACCESS_KEY => If not using AWS profiles, this should
#     be the access secret of your key.
#   (Required) AWS_S3_SECRET_BUCKET_NAME => The bucket name where the GPG sign
#     key is stored.
#   (Required) REPO_NAME => The name of the repository file that you want to
#     add your built packages to.
#
# Informational:
#   This script will look for a file named sign-key-for-$REPO_NAME.asc at the
#   top level of the S3 bucket. Ensure that this file is there.

main() {
  # cd to root path
  cd "$(dirname "$0")/.." || exit

  # shellcheck disable=2039,1091
  source lib/messages.sh

  # Checks presence of required params
  validate_env

  # Create temp dir to store the key file
  tmp_dir="$(mktemp -d)"

  # Set the key names (origin & destination)
  remote_file_name="sign-key-for-$REPO_NAME.asc"
  key_path="$tmp_dir/gpg-key.asc"

  # Get the secret file from AWS S3
  download_from_s3 "$remote_file_name" "$key_path"

  # Then import it onto the GPG keyring
  import_into_gpg_keyring "$key_path"

  # Then remove the tempdir
  rm -rf "$tmp_dir"
}

# Checks the environment for the required variables and then stops if they are
# not found.
validate_env() {
  if [ -z "$AWS_S3_SECRET_BUCKET_NAME" ]; then
    error "Please, set the S3 Bucket using the variable \$AWS_S3_SECRET_BUCKET_NAME"
    exit 1
  fi

  if [ -z "$REPO_NAME" ]; then
    error "Please, set the name of your repository with the var \$REPO_NAME"
    exit 1
  fi
}

# Pulls a file on the S3 bucket to a local path
#
# Parameters
#   1 - The name of the file that is saved on the remote
#   2 - Full path to where you want to save the file
download_from_s3() {
  remote_file_name=$1
  path=$2

  success "Pulling the GPG secret key from S3 bucket"
  aws s3 cp "s3://$AWS_S3_SECRET_BUCKET_NAME/$remote_file_name" \
    "$path" > /dev/null 2>&1; status=$?

  if [ "$status" != 0 ]; then
    error "Failed to pull the file '$remote_file_name' from the S3!"
    exit 1
  fi

  info "Success!"
}

import_into_gpg_keyring() {
  path=$1

  success "Importing the GPG secret key to the keyring"
  gpg --import "$path"
}

main
